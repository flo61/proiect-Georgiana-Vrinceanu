// <auto-generated />
using System;
using Geo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Geo.Migrations
{
    [DbContext(typeof(GeoContext))]
    [Migration("20230118221247_five")]
    partial class five
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Geo.Models.Countriestovisit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countriestovisit");
                });

            modelBuilder.Entity("Geo.Models.Obiective", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ObiectivulMeu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Obiective");
                });

            modelBuilder.Entity("Geo.Models.Todolist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Countries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountriestovisitID")
                        .HasColumnType("int");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObiectiveID")
                        .HasColumnType("int");

                    b.Property<decimal>("Rude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Thedate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CountriestovisitID");

                    b.HasIndex("ObiectiveID");

                    b.ToTable("Todolist");
                });

            modelBuilder.Entity("Geo.Models.Todolist", b =>
                {
                    b.HasOne("Geo.Models.Countriestovisit", "Countriestovisit")
                        .WithMany("Lists")
                        .HasForeignKey("CountriestovisitID");

                    b.HasOne("Geo.Models.Obiective", "Obiective")
                        .WithMany("Lists")
                        .HasForeignKey("ObiectiveID");

                    b.Navigation("Countriestovisit");

                    b.Navigation("Obiective");
                });

            modelBuilder.Entity("Geo.Models.Countriestovisit", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("Geo.Models.Obiective", b =>
                {
                    b.Navigation("Lists");
                });
#pragma warning restore 612, 618
        }
    }
}
